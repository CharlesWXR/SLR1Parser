package cn.edu.njnu.SLR1.demo.wordscanner;


/*
    This file is automatically generated.
    Transform the MFA into such enum, according to the input Lex File.
*/


import cn.edu.njnu.SLR1.demo.element.IdentifierClassifier;
import cn.edu.njnu.SLR1.demo.element.OperatorEnum;
import cn.edu.njnu.SLR1.demo.element.Word;
import cn.edu.njnu.SLR1.generator.wordelement.TypeEnum;

public enum States implements State {
	Fail {
		@Override
		public State next(char word) {
			return Fail;
		}

		@Override
		public Object execute(String _content) throws Exception {
			return null;
		}
	},
	S_0 {
		@Override
		public State next(char word) {
			switch (word) {
				case '\t': {
					return States.S_1;
				}
				case '\n': {
					return States.S_1;
				}
				case '\f': {
					return States.S_1;
				}
				case '\r': {
					return States.S_1;
				}
				case ' ': {
					return States.S_1;
				}
				case '!': {
					return States.S_2;
				}
				case '"': {
					return States.S_3;
				}
				case '#': {
					return States.S_4;
				}
				case '%': {
					return States.S_4;
				}
				case '&': {
					return States.S_6;
				}
				case '\'': {
					return States.S_7;
				}
				case '(': {
					return States.S_4;
				}
				case ')': {
					return States.S_4;
				}
				case '*': {
					return States.S_4;
				}
				case '+': {
					return States.S_11;
				}
				case ',': {
					return States.S_4;
				}
				case '-': {
					return States.S_13;
				}
				case '.': {
					return States.S_4;
				}
				case '/': {
					return States.S_14;
				}
				case '0': {
					return States.S_15;
				}
				case '1': {
					return States.S_15;
				}
				case '2': {
					return States.S_15;
				}
				case '3': {
					return States.S_15;
				}
				case '4': {
					return States.S_15;
				}
				case '5': {
					return States.S_15;
				}
				case '6': {
					return States.S_15;
				}
				case '7': {
					return States.S_15;
				}
				case '8': {
					return States.S_15;
				}
				case '9': {
					return States.S_15;
				}
				case ':': {
					return States.S_4;
				}
				case ';': {
					return States.S_4;
				}
				case '<': {
					return States.S_18;
				}
				case '=': {
					return States.S_2;
				}
				case '>': {
					return States.S_20;
				}
				case '?': {
					return States.S_4;
				}
				case '@': {
					return States.S_4;
				}
				case 'A': {
					return States.S_21;
				}
				case 'B': {
					return States.S_21;
				}
				case 'C': {
					return States.S_21;
				}
				case 'D': {
					return States.S_21;
				}
				case 'E': {
					return States.S_21;
				}
				case 'F': {
					return States.S_21;
				}
				case 'G': {
					return States.S_21;
				}
				case 'H': {
					return States.S_21;
				}
				case 'I': {
					return States.S_21;
				}
				case 'J': {
					return States.S_21;
				}
				case 'K': {
					return States.S_21;
				}
				case 'L': {
					return States.S_21;
				}
				case 'M': {
					return States.S_21;
				}
				case 'N': {
					return States.S_21;
				}
				case 'O': {
					return States.S_21;
				}
				case 'P': {
					return States.S_21;
				}
				case 'Q': {
					return States.S_21;
				}
				case 'R': {
					return States.S_21;
				}
				case 'S': {
					return States.S_21;
				}
				case 'T': {
					return States.S_21;
				}
				case 'U': {
					return States.S_21;
				}
				case 'V': {
					return States.S_21;
				}
				case 'W': {
					return States.S_21;
				}
				case 'X': {
					return States.S_21;
				}
				case 'Y': {
					return States.S_21;
				}
				case 'Z': {
					return States.S_21;
				}
				case '[': {
					return States.S_4;
				}
				case '\\': {
					return States.S_23;
				}
				case ']': {
					return States.S_4;
				}
				case '^': {
					return States.S_4;
				}
				case '_': {
					return States.S_21;
				}
				case 'a': {
					return States.S_21;
				}
				case 'b': {
					return States.S_21;
				}
				case 'c': {
					return States.S_21;
				}
				case 'd': {
					return States.S_21;
				}
				case 'e': {
					return States.S_21;
				}
				case 'f': {
					return States.S_21;
				}
				case 'g': {
					return States.S_21;
				}
				case 'h': {
					return States.S_21;
				}
				case 'i': {
					return States.S_21;
				}
				case 'j': {
					return States.S_21;
				}
				case 'k': {
					return States.S_21;
				}
				case 'l': {
					return States.S_21;
				}
				case 'm': {
					return States.S_21;
				}
				case 'n': {
					return States.S_21;
				}
				case 'o': {
					return States.S_21;
				}
				case 'p': {
					return States.S_21;
				}
				case 'q': {
					return States.S_21;
				}
				case 'r': {
					return States.S_21;
				}
				case 's': {
					return States.S_21;
				}
				case 't': {
					return States.S_21;
				}
				case 'u': {
					return States.S_21;
				}
				case 'v': {
					return States.S_21;
				}
				case 'w': {
					return States.S_21;
				}
				case 'x': {
					return States.S_21;
				}
				case 'y': {
					return States.S_21;
				}
				case 'z': {
					return States.S_21;
				}
				case '{': {
					return States.S_4;
				}
				case '|': {
					return States.S_27;
				}
				case '}': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_return == null) {
				_return = new Word(TypeEnum.Space, _content);
			}

			return _return;
		}
	},
	S_1 {
		@Override
		public State next(char word) {
			switch (word) {
				case ' ': {
					return States.S_1;
				}
				case '\t': {
					return States.S_1;
				}
				case '\n': {
					return States.S_1;
				}
				case '\f': {
					return States.S_1;
				}
				case '\r': {
					return States.S_1;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_return == null) {
				_return = new Word(TypeEnum.Space, _content);
			}

			return _return;
		}
	},
	S_2 {
		@Override
		public State next(char word) {
			switch (word) {
				case '=': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.equals("!"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Reverse, _content);
				}
			if (_content.startsWith("'"))
				if (_return == null) {
					_return = new Word(TypeEnum.Char, _content);
				}
			if (_content.equals("="))
				if (_return == null) {
					_return = new Word(OperatorEnum.Equal, _content);
				}

			return _return;
		}
	},
	S_3 {
		@Override
		public State next(char word) {
			switch (word) {
				case '\t': {
					return States.S_30;
				}
				case '\n': {
					return States.S_30;
				}
				case '\f': {
					return States.S_30;
				}
				case '\r': {
					return States.S_30;
				}
				case ' ': {
					return States.S_30;
				}
				case '!': {
					return States.S_30;
				}
				case '"': {
					return States.S_4;
				}
				case '#': {
					return States.S_30;
				}
				case '%': {
					return States.S_30;
				}
				case '\'': {
					return States.S_30;
				}
				case '(': {
					return States.S_30;
				}
				case ')': {
					return States.S_30;
				}
				case '+': {
					return States.S_30;
				}
				case ',': {
					return States.S_30;
				}
				case '-': {
					return States.S_30;
				}
				case '.': {
					return States.S_30;
				}
				case '0': {
					return States.S_30;
				}
				case '1': {
					return States.S_30;
				}
				case '2': {
					return States.S_30;
				}
				case '3': {
					return States.S_30;
				}
				case '4': {
					return States.S_30;
				}
				case '5': {
					return States.S_30;
				}
				case '6': {
					return States.S_30;
				}
				case '7': {
					return States.S_30;
				}
				case '8': {
					return States.S_30;
				}
				case '9': {
					return States.S_30;
				}
				case ':': {
					return States.S_30;
				}
				case ';': {
					return States.S_30;
				}
				case '<': {
					return States.S_30;
				}
				case '=': {
					return States.S_30;
				}
				case '>': {
					return States.S_30;
				}
				case '?': {
					return States.S_30;
				}
				case '@': {
					return States.S_30;
				}
				case 'A': {
					return States.S_30;
				}
				case 'B': {
					return States.S_30;
				}
				case 'C': {
					return States.S_30;
				}
				case 'D': {
					return States.S_30;
				}
				case 'E': {
					return States.S_30;
				}
				case 'F': {
					return States.S_30;
				}
				case 'G': {
					return States.S_30;
				}
				case 'H': {
					return States.S_30;
				}
				case 'I': {
					return States.S_30;
				}
				case 'J': {
					return States.S_30;
				}
				case 'K': {
					return States.S_30;
				}
				case 'L': {
					return States.S_30;
				}
				case 'M': {
					return States.S_30;
				}
				case 'N': {
					return States.S_30;
				}
				case 'O': {
					return States.S_30;
				}
				case 'P': {
					return States.S_30;
				}
				case 'Q': {
					return States.S_30;
				}
				case 'R': {
					return States.S_30;
				}
				case 'S': {
					return States.S_30;
				}
				case 'T': {
					return States.S_30;
				}
				case 'U': {
					return States.S_30;
				}
				case 'V': {
					return States.S_30;
				}
				case 'W': {
					return States.S_30;
				}
				case 'X': {
					return States.S_30;
				}
				case 'Y': {
					return States.S_30;
				}
				case 'Z': {
					return States.S_30;
				}
				case '[': {
					return States.S_30;
				}
				case '\\': {
					return States.S_30;
				}
				case ']': {
					return States.S_30;
				}
				case '^': {
					return States.S_30;
				}
				case '_': {
					return States.S_30;
				}
				case 'a': {
					return States.S_30;
				}
				case 'b': {
					return States.S_30;
				}
				case 'c': {
					return States.S_30;
				}
				case 'd': {
					return States.S_30;
				}
				case 'e': {
					return States.S_30;
				}
				case 'f': {
					return States.S_30;
				}
				case 'g': {
					return States.S_30;
				}
				case 'h': {
					return States.S_30;
				}
				case 'i': {
					return States.S_30;
				}
				case 'j': {
					return States.S_30;
				}
				case 'k': {
					return States.S_30;
				}
				case 'l': {
					return States.S_30;
				}
				case 'm': {
					return States.S_30;
				}
				case 'n': {
					return States.S_30;
				}
				case 'o': {
					return States.S_30;
				}
				case 'p': {
					return States.S_30;
				}
				case 'q': {
					return States.S_30;
				}
				case 'r': {
					return States.S_30;
				}
				case 's': {
					return States.S_30;
				}
				case 't': {
					return States.S_30;
				}
				case 'u': {
					return States.S_30;
				}
				case 'v': {
					return States.S_30;
				}
				case 'w': {
					return States.S_30;
				}
				case 'x': {
					return States.S_30;
				}
				case 'y': {
					return States.S_30;
				}
				case 'z': {
					return States.S_30;
				}
				case '{': {
					return States.S_30;
				}
				case '|': {
					return States.S_30;
				}
				case '}': {
					return States.S_30;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.startsWith("'"))
				if (_return == null) {
					_return = new Word(TypeEnum.Char, _content);
				}

			return _return;
		}
	},
	S_6 {
		@Override
		public State next(char word) {
			switch (word) {
				case '&': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.equals("&"))
				if (_return == null) {
					_return = new Word(OperatorEnum.BitAnd, _content);
				}

			return _return;
		}
	},
	S_7 {
		@Override
		public State next(char word) {
			switch (word) {
				case '\t': {
					return States.S_4;
				}
				case '\n': {
					return States.S_4;
				}
				case '\f': {
					return States.S_4;
				}
				case '\r': {
					return States.S_4;
				}
				case ' ': {
					return States.S_4;
				}
				case '0': {
					return States.S_4;
				}
				case '1': {
					return States.S_4;
				}
				case '2': {
					return States.S_4;
				}
				case '3': {
					return States.S_4;
				}
				case '4': {
					return States.S_4;
				}
				case '5': {
					return States.S_4;
				}
				case '6': {
					return States.S_4;
				}
				case '7': {
					return States.S_4;
				}
				case '8': {
					return States.S_4;
				}
				case '9': {
					return States.S_4;
				}
				case 'A': {
					return States.S_4;
				}
				case 'B': {
					return States.S_4;
				}
				case 'C': {
					return States.S_4;
				}
				case 'D': {
					return States.S_4;
				}
				case 'E': {
					return States.S_4;
				}
				case 'F': {
					return States.S_4;
				}
				case 'G': {
					return States.S_4;
				}
				case 'H': {
					return States.S_4;
				}
				case 'I': {
					return States.S_4;
				}
				case 'J': {
					return States.S_4;
				}
				case 'K': {
					return States.S_4;
				}
				case 'L': {
					return States.S_4;
				}
				case 'M': {
					return States.S_4;
				}
				case 'N': {
					return States.S_4;
				}
				case 'O': {
					return States.S_4;
				}
				case 'P': {
					return States.S_4;
				}
				case 'Q': {
					return States.S_4;
				}
				case 'R': {
					return States.S_4;
				}
				case 'S': {
					return States.S_4;
				}
				case 'T': {
					return States.S_4;
				}
				case 'U': {
					return States.S_4;
				}
				case 'V': {
					return States.S_4;
				}
				case 'W': {
					return States.S_4;
				}
				case 'X': {
					return States.S_4;
				}
				case 'Y': {
					return States.S_4;
				}
				case 'Z': {
					return States.S_4;
				}
				case 'a': {
					return States.S_4;
				}
				case 'b': {
					return States.S_4;
				}
				case 'c': {
					return States.S_4;
				}
				case 'd': {
					return States.S_4;
				}
				case 'e': {
					return States.S_4;
				}
				case 'f': {
					return States.S_4;
				}
				case 'g': {
					return States.S_4;
				}
				case 'h': {
					return States.S_4;
				}
				case 'i': {
					return States.S_4;
				}
				case 'j': {
					return States.S_4;
				}
				case 'k': {
					return States.S_4;
				}
				case 'l': {
					return States.S_4;
				}
				case 'm': {
					return States.S_4;
				}
				case 'n': {
					return States.S_4;
				}
				case 'o': {
					return States.S_4;
				}
				case 'p': {
					return States.S_4;
				}
				case 'q': {
					return States.S_4;
				}
				case 'r': {
					return States.S_4;
				}
				case 's': {
					return States.S_4;
				}
				case 't': {
					return States.S_4;
				}
				case 'u': {
					return States.S_4;
				}
				case 'v': {
					return States.S_4;
				}
				case 'w': {
					return States.S_4;
				}
				case 'x': {
					return States.S_4;
				}
				case 'y': {
					return States.S_4;
				}
				case 'z': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.startsWith("'"))
				if (_return == null) {
					_return = new Word(TypeEnum.Char, _content);
				}

			return _return;
		}
	},
	S_11 {
		@Override
		public State next(char word) {
			switch (word) {
				case '+': {
					return States.S_4;
				}
				case '=': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.equals("+"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Plus, _content);
				}
			if (_content.startsWith("'"))
				if (_return == null) {
					_return = new Word(TypeEnum.Char, _content);
				}

			return _return;
		}
	},
	S_13 {
		@Override
		public State next(char word) {
			switch (word) {
				case '-': {
					return States.S_4;
				}
				case '>': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.equals("-"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Minus, _content);
				}
			if (_content.startsWith("'"))
				if (_return == null) {
					_return = new Word(TypeEnum.Char, _content);
				}

			return _return;
		}
	},
	S_14 {
		@Override
		public State next(char word) {
			switch (word) {
				case '*': {
					return States.S_37;
				}
				case '/': {
					return States.S_38;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.equals("/"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Divide, _content);
				}

			return _return;
		}
	},
	S_15 {
		@Override
		public State next(char word) {
			switch (word) {
				case '.': {
					return States.S_39;
				}
				case '0': {
					return States.S_15;
				}
				case '1': {
					return States.S_15;
				}
				case '2': {
					return States.S_15;
				}
				case '3': {
					return States.S_15;
				}
				case '4': {
					return States.S_15;
				}
				case '5': {
					return States.S_15;
				}
				case '6': {
					return States.S_15;
				}
				case '7': {
					return States.S_15;
				}
				case '8': {
					return States.S_15;
				}
				case '9': {
					return States.S_15;
				}
				case 'A': {
					return States.S_21;
				}
				case 'B': {
					return States.S_21;
				}
				case 'C': {
					return States.S_21;
				}
				case 'D': {
					return States.S_21;
				}
				case 'E': {
					return States.S_40;
				}
				case 'F': {
					return States.S_21;
				}
				case 'G': {
					return States.S_21;
				}
				case 'H': {
					return States.S_21;
				}
				case 'I': {
					return States.S_21;
				}
				case 'J': {
					return States.S_21;
				}
				case 'K': {
					return States.S_21;
				}
				case 'L': {
					return States.S_21;
				}
				case 'M': {
					return States.S_21;
				}
				case 'N': {
					return States.S_21;
				}
				case 'O': {
					return States.S_21;
				}
				case 'P': {
					return States.S_21;
				}
				case 'Q': {
					return States.S_21;
				}
				case 'R': {
					return States.S_21;
				}
				case 'S': {
					return States.S_21;
				}
				case 'T': {
					return States.S_21;
				}
				case 'U': {
					return States.S_21;
				}
				case 'V': {
					return States.S_21;
				}
				case 'W': {
					return States.S_21;
				}
				case 'X': {
					return States.S_21;
				}
				case 'Y': {
					return States.S_21;
				}
				case 'Z': {
					return States.S_21;
				}
				case '_': {
					return States.S_21;
				}
				case 'a': {
					return States.S_21;
				}
				case 'b': {
					return States.S_21;
				}
				case 'c': {
					return States.S_21;
				}
				case 'd': {
					return States.S_21;
				}
				case 'e': {
					return States.S_40;
				}
				case 'f': {
					return States.S_21;
				}
				case 'g': {
					return States.S_21;
				}
				case 'h': {
					return States.S_21;
				}
				case 'i': {
					return States.S_21;
				}
				case 'j': {
					return States.S_21;
				}
				case 'k': {
					return States.S_21;
				}
				case 'l': {
					return States.S_21;
				}
				case 'm': {
					return States.S_21;
				}
				case 'n': {
					return States.S_21;
				}
				case 'o': {
					return States.S_21;
				}
				case 'p': {
					return States.S_21;
				}
				case 'q': {
					return States.S_21;
				}
				case 'r': {
					return States.S_21;
				}
				case 's': {
					return States.S_21;
				}
				case 't': {
					return States.S_21;
				}
				case 'u': {
					return States.S_21;
				}
				case 'v': {
					return States.S_21;
				}
				case 'w': {
					return States.S_21;
				}
				case 'x': {
					return States.S_21;
				}
				case 'y': {
					return States.S_21;
				}
				case 'z': {
					return States.S_21;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			try {
				if (_return == null) {
					_return = new Word(TypeEnum.Int, Integer.parseInt(_content));
				}
			} catch (NumberFormatException e) {
				// Nope, simply in case the Double type and Integer type share the same ending
			}

			if (_return == null) {
				_return = IdentifierClassifier.classify(_content);
			}
			return _return;
		}
	},
	S_18 {
		@Override
		public State next(char word) {
			switch (word) {
				case '<': {
					return States.S_4;
				}
				case '=': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.equals("<"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Less, _content);
				}
			if (_content.startsWith("'"))
				if (_return == null) {
					_return = new Word(TypeEnum.Char, _content);
				}

			return _return;
		}
	},
	S_20 {
		@Override
		public State next(char word) {
			switch (word) {
				case '=': {
					return States.S_4;
				}
				case '>': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.equals(">"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Greater, _content);
				}
			if (_content.startsWith("'"))
				if (_return == null) {
					_return = new Word(TypeEnum.Char, _content);
				}

			return _return;
		}
	},
	S_21 {
		@Override
		public State next(char word) {
			switch (word) {
				case '0': {
					return States.S_21;
				}
				case '1': {
					return States.S_21;
				}
				case '2': {
					return States.S_21;
				}
				case '3': {
					return States.S_21;
				}
				case '4': {
					return States.S_21;
				}
				case '5': {
					return States.S_21;
				}
				case '6': {
					return States.S_21;
				}
				case '7': {
					return States.S_21;
				}
				case '8': {
					return States.S_21;
				}
				case '9': {
					return States.S_21;
				}
				case 'A': {
					return States.S_21;
				}
				case 'B': {
					return States.S_21;
				}
				case 'C': {
					return States.S_21;
				}
				case 'D': {
					return States.S_21;
				}
				case 'E': {
					return States.S_21;
				}
				case 'F': {
					return States.S_21;
				}
				case 'G': {
					return States.S_21;
				}
				case 'H': {
					return States.S_21;
				}
				case 'I': {
					return States.S_21;
				}
				case 'J': {
					return States.S_21;
				}
				case 'K': {
					return States.S_21;
				}
				case 'L': {
					return States.S_21;
				}
				case 'M': {
					return States.S_21;
				}
				case 'N': {
					return States.S_21;
				}
				case 'O': {
					return States.S_21;
				}
				case 'P': {
					return States.S_21;
				}
				case 'Q': {
					return States.S_21;
				}
				case 'R': {
					return States.S_21;
				}
				case 'S': {
					return States.S_21;
				}
				case 'T': {
					return States.S_21;
				}
				case 'U': {
					return States.S_21;
				}
				case 'V': {
					return States.S_21;
				}
				case 'W': {
					return States.S_21;
				}
				case 'X': {
					return States.S_21;
				}
				case 'Y': {
					return States.S_21;
				}
				case 'Z': {
					return States.S_21;
				}
				case '_': {
					return States.S_21;
				}
				case 'a': {
					return States.S_21;
				}
				case 'b': {
					return States.S_21;
				}
				case 'c': {
					return States.S_21;
				}
				case 'd': {
					return States.S_21;
				}
				case 'e': {
					return States.S_21;
				}
				case 'f': {
					return States.S_21;
				}
				case 'g': {
					return States.S_21;
				}
				case 'h': {
					return States.S_21;
				}
				case 'i': {
					return States.S_21;
				}
				case 'j': {
					return States.S_21;
				}
				case 'k': {
					return States.S_21;
				}
				case 'l': {
					return States.S_21;
				}
				case 'm': {
					return States.S_21;
				}
				case 'n': {
					return States.S_21;
				}
				case 'o': {
					return States.S_21;
				}
				case 'p': {
					return States.S_21;
				}
				case 'q': {
					return States.S_21;
				}
				case 'r': {
					return States.S_21;
				}
				case 's': {
					return States.S_21;
				}
				case 't': {
					return States.S_21;
				}
				case 'u': {
					return States.S_21;
				}
				case 'v': {
					return States.S_21;
				}
				case 'w': {
					return States.S_21;
				}
				case 'x': {
					return States.S_21;
				}
				case 'y': {
					return States.S_21;
				}
				case 'z': {
					return States.S_21;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_return == null) {
				_return = IdentifierClassifier.classify(_content);
			}
			if (_content.startsWith("'"))
				if (_return == null) {
					_return = new Word(TypeEnum.Char, _content);
				}
			if (_return == null) {
				_return = new Word(TypeEnum.Double, Double.parseDouble(_content));
			}

			return _return;
		}
	},
	S_23 {
		@Override
		public State next(char word) {
			switch (word) {
				case '\'': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;

			return _return;
		}
	},
	S_27 {
		@Override
		public State next(char word) {
			switch (word) {
				case '|': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.equals("|"))
				if (_return == null) {
					_return = new Word(OperatorEnum.BitOr, _content);
				}
			if (_content.startsWith("'"))
				if (_return == null) {
					_return = new Word(TypeEnum.Char, _content);
				}

			return _return;
		}
	},
	S_30 {
		@Override
		public State next(char word) {
			switch (word) {
				case '\t': {
					return States.S_30;
				}
				case '\n': {
					return States.S_30;
				}
				case '\f': {
					return States.S_30;
				}
				case '\r': {
					return States.S_30;
				}
				case ' ': {
					return States.S_30;
				}
				case '!': {
					return States.S_30;
				}
				case '"': {
					return States.S_4;
				}
				case '#': {
					return States.S_30;
				}
				case '%': {
					return States.S_30;
				}
				case '\'': {
					return States.S_30;
				}
				case '(': {
					return States.S_30;
				}
				case ')': {
					return States.S_30;
				}
				case '+': {
					return States.S_30;
				}
				case ',': {
					return States.S_30;
				}
				case '-': {
					return States.S_30;
				}
				case '.': {
					return States.S_30;
				}
				case '0': {
					return States.S_30;
				}
				case '1': {
					return States.S_30;
				}
				case '2': {
					return States.S_30;
				}
				case '3': {
					return States.S_30;
				}
				case '4': {
					return States.S_30;
				}
				case '5': {
					return States.S_30;
				}
				case '6': {
					return States.S_30;
				}
				case '7': {
					return States.S_30;
				}
				case '8': {
					return States.S_30;
				}
				case '9': {
					return States.S_30;
				}
				case ':': {
					return States.S_30;
				}
				case ';': {
					return States.S_30;
				}
				case '<': {
					return States.S_30;
				}
				case '=': {
					return States.S_30;
				}
				case '>': {
					return States.S_30;
				}
				case '?': {
					return States.S_30;
				}
				case '@': {
					return States.S_30;
				}
				case 'A': {
					return States.S_30;
				}
				case 'B': {
					return States.S_30;
				}
				case 'C': {
					return States.S_30;
				}
				case 'D': {
					return States.S_30;
				}
				case 'E': {
					return States.S_30;
				}
				case 'F': {
					return States.S_30;
				}
				case 'G': {
					return States.S_30;
				}
				case 'H': {
					return States.S_30;
				}
				case 'I': {
					return States.S_30;
				}
				case 'J': {
					return States.S_30;
				}
				case 'K': {
					return States.S_30;
				}
				case 'L': {
					return States.S_30;
				}
				case 'M': {
					return States.S_30;
				}
				case 'N': {
					return States.S_30;
				}
				case 'O': {
					return States.S_30;
				}
				case 'P': {
					return States.S_30;
				}
				case 'Q': {
					return States.S_30;
				}
				case 'R': {
					return States.S_30;
				}
				case 'S': {
					return States.S_30;
				}
				case 'T': {
					return States.S_30;
				}
				case 'U': {
					return States.S_30;
				}
				case 'V': {
					return States.S_30;
				}
				case 'W': {
					return States.S_30;
				}
				case 'X': {
					return States.S_30;
				}
				case 'Y': {
					return States.S_30;
				}
				case 'Z': {
					return States.S_30;
				}
				case '[': {
					return States.S_30;
				}
				case '\\': {
					return States.S_30;
				}
				case ']': {
					return States.S_30;
				}
				case '^': {
					return States.S_30;
				}
				case '_': {
					return States.S_30;
				}
				case 'a': {
					return States.S_30;
				}
				case 'b': {
					return States.S_30;
				}
				case 'c': {
					return States.S_30;
				}
				case 'd': {
					return States.S_30;
				}
				case 'e': {
					return States.S_30;
				}
				case 'f': {
					return States.S_30;
				}
				case 'g': {
					return States.S_30;
				}
				case 'h': {
					return States.S_30;
				}
				case 'i': {
					return States.S_30;
				}
				case 'j': {
					return States.S_30;
				}
				case 'k': {
					return States.S_30;
				}
				case 'l': {
					return States.S_30;
				}
				case 'm': {
					return States.S_30;
				}
				case 'n': {
					return States.S_30;
				}
				case 'o': {
					return States.S_30;
				}
				case 'p': {
					return States.S_30;
				}
				case 'q': {
					return States.S_30;
				}
				case 'r': {
					return States.S_30;
				}
				case 's': {
					return States.S_30;
				}
				case 't': {
					return States.S_30;
				}
				case 'u': {
					return States.S_30;
				}
				case 'v': {
					return States.S_30;
				}
				case 'w': {
					return States.S_30;
				}
				case 'x': {
					return States.S_30;
				}
				case 'y': {
					return States.S_30;
				}
				case 'z': {
					return States.S_30;
				}
				case '{': {
					return States.S_30;
				}
				case '|': {
					return States.S_30;
				}
				case '}': {
					return States.S_30;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;

			return _return;
		}
	},
	S_37 {
		@Override
		public State next(char word) {
			switch (word) {
				case '\t': {
					return States.S_37;
				}
				case '\n': {
					return States.S_37;
				}
				case '\f': {
					return States.S_37;
				}
				case '\r': {
					return States.S_37;
				}
				case ' ': {
					return States.S_37;
				}
				case '!': {
					return States.S_37;
				}
				case '"': {
					return States.S_37;
				}
				case '#': {
					return States.S_37;
				}
				case '%': {
					return States.S_37;
				}
				case '\'': {
					return States.S_37;
				}
				case '(': {
					return States.S_37;
				}
				case ')': {
					return States.S_37;
				}
				case '*': {
					return States.S_47;
				}
				case '+': {
					return States.S_37;
				}
				case ',': {
					return States.S_37;
				}
				case '-': {
					return States.S_37;
				}
				case '.': {
					return States.S_37;
				}
				case '0': {
					return States.S_37;
				}
				case '1': {
					return States.S_37;
				}
				case '2': {
					return States.S_37;
				}
				case '3': {
					return States.S_37;
				}
				case '4': {
					return States.S_37;
				}
				case '5': {
					return States.S_37;
				}
				case '6': {
					return States.S_37;
				}
				case '7': {
					return States.S_37;
				}
				case '8': {
					return States.S_37;
				}
				case '9': {
					return States.S_37;
				}
				case ':': {
					return States.S_37;
				}
				case ';': {
					return States.S_37;
				}
				case '<': {
					return States.S_37;
				}
				case '=': {
					return States.S_37;
				}
				case '>': {
					return States.S_37;
				}
				case '?': {
					return States.S_37;
				}
				case '@': {
					return States.S_37;
				}
				case 'A': {
					return States.S_37;
				}
				case 'B': {
					return States.S_37;
				}
				case 'C': {
					return States.S_37;
				}
				case 'D': {
					return States.S_37;
				}
				case 'E': {
					return States.S_37;
				}
				case 'F': {
					return States.S_37;
				}
				case 'G': {
					return States.S_37;
				}
				case 'H': {
					return States.S_37;
				}
				case 'I': {
					return States.S_37;
				}
				case 'J': {
					return States.S_37;
				}
				case 'K': {
					return States.S_37;
				}
				case 'L': {
					return States.S_37;
				}
				case 'M': {
					return States.S_37;
				}
				case 'N': {
					return States.S_37;
				}
				case 'O': {
					return States.S_37;
				}
				case 'P': {
					return States.S_37;
				}
				case 'Q': {
					return States.S_37;
				}
				case 'R': {
					return States.S_37;
				}
				case 'S': {
					return States.S_37;
				}
				case 'T': {
					return States.S_37;
				}
				case 'U': {
					return States.S_37;
				}
				case 'V': {
					return States.S_37;
				}
				case 'W': {
					return States.S_37;
				}
				case 'X': {
					return States.S_37;
				}
				case 'Y': {
					return States.S_37;
				}
				case 'Z': {
					return States.S_37;
				}
				case '[': {
					return States.S_37;
				}
				case ']': {
					return States.S_37;
				}
				case '^': {
					return States.S_37;
				}
				case '_': {
					return States.S_37;
				}
				case 'a': {
					return States.S_37;
				}
				case 'b': {
					return States.S_37;
				}
				case 'c': {
					return States.S_37;
				}
				case 'd': {
					return States.S_37;
				}
				case 'e': {
					return States.S_37;
				}
				case 'f': {
					return States.S_37;
				}
				case 'g': {
					return States.S_37;
				}
				case 'h': {
					return States.S_37;
				}
				case 'i': {
					return States.S_37;
				}
				case 'j': {
					return States.S_37;
				}
				case 'k': {
					return States.S_37;
				}
				case 'l': {
					return States.S_37;
				}
				case 'm': {
					return States.S_37;
				}
				case 'n': {
					return States.S_37;
				}
				case 'o': {
					return States.S_37;
				}
				case 'p': {
					return States.S_37;
				}
				case 'q': {
					return States.S_37;
				}
				case 'r': {
					return States.S_37;
				}
				case 's': {
					return States.S_37;
				}
				case 't': {
					return States.S_37;
				}
				case 'u': {
					return States.S_37;
				}
				case 'v': {
					return States.S_37;
				}
				case 'w': {
					return States.S_37;
				}
				case 'x': {
					return States.S_37;
				}
				case 'y': {
					return States.S_37;
				}
				case 'z': {
					return States.S_37;
				}
				case '{': {
					return States.S_37;
				}
				case '|': {
					return States.S_37;
				}
				case '}': {
					return States.S_37;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;

			return _return;
		}
	},
	S_38 {
		@Override
		public State next(char word) {
			switch (word) {
				case '\t': {
					return States.S_38;
				}
				case '\n': {
					return States.S_48;
				}
				case '\r': {
					return States.S_48;
				}
				case ' ': {
					return States.S_38;
				}
				case '!': {
					return States.S_38;
				}
				case '"': {
					return States.S_38;
				}
				case '#': {
					return States.S_38;
				}
				case '%': {
					return States.S_38;
				}
				case '\'': {
					return States.S_38;
				}
				case '(': {
					return States.S_38;
				}
				case ')': {
					return States.S_38;
				}
				case '+': {
					return States.S_38;
				}
				case ',': {
					return States.S_38;
				}
				case '-': {
					return States.S_38;
				}
				case '.': {
					return States.S_38;
				}
				case '0': {
					return States.S_38;
				}
				case '1': {
					return States.S_38;
				}
				case '2': {
					return States.S_38;
				}
				case '3': {
					return States.S_38;
				}
				case '4': {
					return States.S_38;
				}
				case '5': {
					return States.S_38;
				}
				case '6': {
					return States.S_38;
				}
				case '7': {
					return States.S_38;
				}
				case '8': {
					return States.S_38;
				}
				case '9': {
					return States.S_38;
				}
				case ':': {
					return States.S_38;
				}
				case ';': {
					return States.S_38;
				}
				case '<': {
					return States.S_38;
				}
				case '=': {
					return States.S_38;
				}
				case '>': {
					return States.S_38;
				}
				case '?': {
					return States.S_38;
				}
				case '@': {
					return States.S_38;
				}
				case 'A': {
					return States.S_38;
				}
				case 'B': {
					return States.S_38;
				}
				case 'C': {
					return States.S_38;
				}
				case 'D': {
					return States.S_38;
				}
				case 'E': {
					return States.S_38;
				}
				case 'F': {
					return States.S_38;
				}
				case 'G': {
					return States.S_38;
				}
				case 'H': {
					return States.S_38;
				}
				case 'I': {
					return States.S_38;
				}
				case 'J': {
					return States.S_38;
				}
				case 'K': {
					return States.S_38;
				}
				case 'L': {
					return States.S_38;
				}
				case 'M': {
					return States.S_38;
				}
				case 'N': {
					return States.S_38;
				}
				case 'O': {
					return States.S_38;
				}
				case 'P': {
					return States.S_38;
				}
				case 'Q': {
					return States.S_38;
				}
				case 'R': {
					return States.S_38;
				}
				case 'S': {
					return States.S_38;
				}
				case 'T': {
					return States.S_38;
				}
				case 'U': {
					return States.S_38;
				}
				case 'V': {
					return States.S_38;
				}
				case 'W': {
					return States.S_38;
				}
				case 'X': {
					return States.S_38;
				}
				case 'Y': {
					return States.S_38;
				}
				case 'Z': {
					return States.S_38;
				}
				case '[': {
					return States.S_38;
				}
				case ']': {
					return States.S_38;
				}
				case '^': {
					return States.S_38;
				}
				case '_': {
					return States.S_38;
				}
				case 'a': {
					return States.S_38;
				}
				case 'b': {
					return States.S_38;
				}
				case 'c': {
					return States.S_38;
				}
				case 'd': {
					return States.S_38;
				}
				case 'e': {
					return States.S_38;
				}
				case 'f': {
					return States.S_38;
				}
				case 'g': {
					return States.S_38;
				}
				case 'h': {
					return States.S_38;
				}
				case 'i': {
					return States.S_38;
				}
				case 'j': {
					return States.S_38;
				}
				case 'k': {
					return States.S_38;
				}
				case 'l': {
					return States.S_38;
				}
				case 'm': {
					return States.S_38;
				}
				case 'n': {
					return States.S_38;
				}
				case 'o': {
					return States.S_38;
				}
				case 'p': {
					return States.S_38;
				}
				case 'q': {
					return States.S_38;
				}
				case 'r': {
					return States.S_38;
				}
				case 's': {
					return States.S_38;
				}
				case 't': {
					return States.S_38;
				}
				case 'u': {
					return States.S_38;
				}
				case 'v': {
					return States.S_38;
				}
				case 'w': {
					return States.S_38;
				}
				case 'x': {
					return States.S_38;
				}
				case 'y': {
					return States.S_38;
				}
				case 'z': {
					return States.S_38;
				}
				case '{': {
					return States.S_38;
				}
				case '|': {
					return States.S_38;
				}
				case '}': {
					return States.S_38;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;

			return _return;
		}
	},
	S_39 {
		@Override
		public State next(char word) {
			switch (word) {
				case '0': {
					return States.S_49;
				}
				case '1': {
					return States.S_49;
				}
				case '2': {
					return States.S_49;
				}
				case '3': {
					return States.S_49;
				}
				case '4': {
					return States.S_49;
				}
				case '5': {
					return States.S_49;
				}
				case '6': {
					return States.S_49;
				}
				case '7': {
					return States.S_49;
				}
				case '8': {
					return States.S_49;
				}
				case '9': {
					return States.S_49;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;

			return _return;
		}
	},
	S_40 {
		@Override
		public State next(char word) {
			switch (word) {
				case '+': {
					return States.S_50;
				}
				case '-': {
					return States.S_50;
				}
				case '0': {
					return States.S_21;
				}
				case '1': {
					return States.S_21;
				}
				case '2': {
					return States.S_21;
				}
				case '3': {
					return States.S_21;
				}
				case '4': {
					return States.S_21;
				}
				case '5': {
					return States.S_21;
				}
				case '6': {
					return States.S_21;
				}
				case '7': {
					return States.S_21;
				}
				case '8': {
					return States.S_21;
				}
				case '9': {
					return States.S_21;
				}
				case 'A': {
					return States.S_21;
				}
				case 'B': {
					return States.S_21;
				}
				case 'C': {
					return States.S_21;
				}
				case 'D': {
					return States.S_21;
				}
				case 'E': {
					return States.S_21;
				}
				case 'F': {
					return States.S_21;
				}
				case 'G': {
					return States.S_21;
				}
				case 'H': {
					return States.S_21;
				}
				case 'I': {
					return States.S_21;
				}
				case 'J': {
					return States.S_21;
				}
				case 'K': {
					return States.S_21;
				}
				case 'L': {
					return States.S_21;
				}
				case 'M': {
					return States.S_21;
				}
				case 'N': {
					return States.S_21;
				}
				case 'O': {
					return States.S_21;
				}
				case 'P': {
					return States.S_21;
				}
				case 'Q': {
					return States.S_21;
				}
				case 'R': {
					return States.S_21;
				}
				case 'S': {
					return States.S_21;
				}
				case 'T': {
					return States.S_21;
				}
				case 'U': {
					return States.S_21;
				}
				case 'V': {
					return States.S_21;
				}
				case 'W': {
					return States.S_21;
				}
				case 'X': {
					return States.S_21;
				}
				case 'Y': {
					return States.S_21;
				}
				case 'Z': {
					return States.S_21;
				}
				case '_': {
					return States.S_21;
				}
				case 'a': {
					return States.S_21;
				}
				case 'b': {
					return States.S_21;
				}
				case 'c': {
					return States.S_21;
				}
				case 'd': {
					return States.S_21;
				}
				case 'e': {
					return States.S_21;
				}
				case 'f': {
					return States.S_21;
				}
				case 'g': {
					return States.S_21;
				}
				case 'h': {
					return States.S_21;
				}
				case 'i': {
					return States.S_21;
				}
				case 'j': {
					return States.S_21;
				}
				case 'k': {
					return States.S_21;
				}
				case 'l': {
					return States.S_21;
				}
				case 'm': {
					return States.S_21;
				}
				case 'n': {
					return States.S_21;
				}
				case 'o': {
					return States.S_21;
				}
				case 'p': {
					return States.S_21;
				}
				case 'q': {
					return States.S_21;
				}
				case 'r': {
					return States.S_21;
				}
				case 's': {
					return States.S_21;
				}
				case 't': {
					return States.S_21;
				}
				case 'u': {
					return States.S_21;
				}
				case 'v': {
					return States.S_21;
				}
				case 'w': {
					return States.S_21;
				}
				case 'x': {
					return States.S_21;
				}
				case 'y': {
					return States.S_21;
				}
				case 'z': {
					return States.S_21;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_return == null) {
				_return = IdentifierClassifier.classify(_content);
			}

			return _return;
		}
	},
	S_47 {
		@Override
		public State next(char word) {
			switch (word) {
				case '/': {
					return States.S_4;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;

			return _return;
		}
	},
	S_48 {
		@Override
		public State next(char word) {
			switch (word) {
				case '\n': {
					return States.S_48;
				}
				case '\r': {
					return States.S_48;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_return == null) {
				_return = new Word(OperatorEnum.Comment, _content);
			}

			return _return;
		}
	},
	S_49 {
		@Override
		public State next(char word) {
			switch (word) {
				case '0': {
					return States.S_49;
				}
				case '1': {
					return States.S_49;
				}
				case '2': {
					return States.S_49;
				}
				case '3': {
					return States.S_49;
				}
				case '4': {
					return States.S_49;
				}
				case '5': {
					return States.S_49;
				}
				case 'e': {
					return States.S_53;
				}
				case 'E': {
					return States.S_53;
				}
				case '6': {
					return States.S_49;
				}
				case '7': {
					return States.S_49;
				}
				case '8': {
					return States.S_49;
				}
				case '9': {
					return States.S_49;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_return == null) {
				_return = new Word(TypeEnum.Double, Double.parseDouble(_content));
			}

			return _return;
		}
	},
	S_50 {
		@Override
		public State next(char word) {
			switch (word) {
				case '0': {
					return States.S_54;
				}
				case '1': {
					return States.S_54;
				}
				case '2': {
					return States.S_54;
				}
				case '3': {
					return States.S_54;
				}
				case '4': {
					return States.S_54;
				}
				case '5': {
					return States.S_54;
				}
				case '6': {
					return States.S_54;
				}
				case '7': {
					return States.S_54;
				}
				case '8': {
					return States.S_54;
				}
				case '9': {
					return States.S_54;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;

			return _return;
		}
	},
	S_53 {
		@Override
		public State next(char word) {
			switch (word) {
				case '0': {
					return States.S_54;
				}
				case '1': {
					return States.S_54;
				}
				case '2': {
					return States.S_54;
				}
				case '3': {
					return States.S_54;
				}
				case '4': {
					return States.S_54;
				}
				case '5': {
					return States.S_54;
				}
				case '6': {
					return States.S_54;
				}
				case '7': {
					return States.S_54;
				}
				case '8': {
					return States.S_54;
				}
				case '9': {
					return States.S_54;
				}
				case '+': {
					return States.S_50;
				}
				case '-': {
					return States.S_50;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;

			return _return;
		}
	},
	S_54 {
		@Override
		public State next(char word) {
			switch (word) {
				case '0': {
					return States.S_54;
				}
				case '1': {
					return States.S_54;
				}
				case '2': {
					return States.S_54;
				}
				case '3': {
					return States.S_54;
				}
				case '4': {
					return States.S_54;
				}
				case '5': {
					return States.S_54;
				}
				case '6': {
					return States.S_54;
				}
				case '7': {
					return States.S_54;
				}
				case '8': {
					return States.S_54;
				}
				case '9': {
					return States.S_54;
				}

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_return == null) {
				_return = new Word(TypeEnum.Double, Double.parseDouble(_content));
			}
			if (_return == null) {
				_return = new Word(TypeEnum.Double, Double.parseDouble(_content));
			}

			return _return;
		}
	},
	S_4 {
		@Override
		public State next(char word) {
			switch (word) {

				default:
					return Fail;
			}
		}

		@Override
		public Object execute(String _content) throws Exception {
			Object _return = null;
			if (_content.startsWith("'"))
				if (_return == null) {
					_return = new Word(TypeEnum.Char, _content);
				}
			if (_content.equals("%"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Mod, _content);
				}
			if (_content.equals("("))
				if (_return == null) {
					_return = new Word(OperatorEnum.LBracket, _content);
				}
			if (_content.equals(")"))
				if (_return == null) {
					_return = new Word(OperatorEnum.RBracket, _content);
				}
			if (_content.equals("*"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Multiply, _content);
				}
			if (_content.equals(","))
				if (_return == null) {
					_return = new Word(OperatorEnum.Comma, _content);
				}
			if (_content.equals(":"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Colon, _content);
				}
			if (_content.equals(";"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Semicolon, _content);
				}
			if (_content.equals("["))
				if (_return == null) {
					_return = new Word(OperatorEnum.LSquareBracket, _content);
				}
			if (_content.equals("]"))
				if (_return == null) {
					_return = new Word(OperatorEnum.RSquareBracket, _content);
				}
			if (_content.equals("{"))
				if (_return == null) {
					_return = new Word(OperatorEnum.LCurlyBracket, _content);
				}
			if (_content.equals("}"))
				if (_return == null) {
					_return = new Word(OperatorEnum.RCurlyBracket, _content);
				}
			if (_content.equals("!="))
				if (_return == null) {
					_return = new Word(OperatorEnum.Unequal, _content);
				}
			if (_content.startsWith("\""))
				if (_return == null) {
					_return = new Word(TypeEnum.String, _content);
				}
			if (_content.equals("&&"))
				if (_return == null) {
					_return = new Word(OperatorEnum.And, _content);
				}
			if (_content.equals("++"))
				if (_return == null) {
					_return = new Word(OperatorEnum.PlusPlus, _content);
				}
			if (_content.equals("+="))
				if (_return == null) {
					_return = new Word(OperatorEnum.PlusEqual, _content);
				}
			if (_content.equals("--"))
				if (_return == null) {
					_return = new Word(OperatorEnum.MinusMinus, _content);
				}
			if (_content.equals("->"))
				if (_return == null) {
					_return = new Word(OperatorEnum.MemberAccess, _content);
				}
			if (_content.equals("<<"))
				if (_return == null) {
					_return = new Word(OperatorEnum.LeftBitShift, _content);
				}
			if (_content.equals("<="))
				if (_return == null) {
					_return = new Word(OperatorEnum.LessEqual, _content);
				}
			if (_content.equals("=="))
				if (_return == null) {
					_return = new Word(OperatorEnum.EqualEqual, _content);
				}
			if (_content.equals(">="))
				if (_return == null) {
					_return = new Word(OperatorEnum.GreaterEqual, _content);
				}
			if (_content.equals(">>"))
				if (_return == null) {
					_return = new Word(OperatorEnum.RightBitShift, _content);
				}
			if (_content.equals("||"))
				if (_return == null) {
					_return = new Word(OperatorEnum.Or, _content);
				}
			if (_return == null) {
				_return = new Word(OperatorEnum.Comment, _content);
			}

			return _return;
		}
	}
}